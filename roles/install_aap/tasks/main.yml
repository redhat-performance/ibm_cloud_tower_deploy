---
- name: "Create workspace for ansible tower installation"
  file:
    path: "/root/ansible-tower-setup"
    state: directory

- name: "Create the install vars file"
  template:
    src: install_vars.j2
    dest: /root/ansible-tower-setup/install_vars.yml

- name: create the cluster install inventory
  template:
    src: "{{ inventory_template }}"
    dest: /root/ansible-tower-setup/inventory.cluster

- name: "Download installation tarball"
  get_url:
    url: "{{ installation_tarball }}"
    dest: "/tmp/{{ installation_tarball | basename }}"
    force: no
  delegate_to: localhost

- name: "Copy the installation tarball to Tower node"
  copy:
    src: "/tmp/{{ installation_tarball | basename }}"
    dest: "/root/{{ installation_tarball | basename }}"

- name: "Install tar before we attempt to unpack"
  yum:
    name: tar
    state: present

- name: "Unpack installation tarball"
  unarchive:
    src: "/root/{{ installation_tarball | basename }}"
    dest: "/root/ansible-tower-setup"
    remote_src: yes
    extra_opts:
      - "--strip-components=1"
    creates: "/root/ansible-tower-setup/inventory"

- name: "Create ansible configuration file"
  copy:
    dest: "/root/ansible-tower-setup/ansible.cfg"
    content: |
        [defaults]
        host_key_checking = False

- name: "Generate graph with setup.sh"
  command: "./setup.sh -i inventory.cluster -e @install_vars.yml {{ EXTRA_SETUP_PARAMS|default('') }} -- --tag generate_dot_file"
  args:
    chdir: "/root/ansible-tower-setup"
  when: inventory_template == "inventory_cluster_4.1.j2" and 'tower' in groups and groups['tower'] | length > 0
  tags:
    - debug

- name: "Running setup.sh"
  command: "./setup.sh -i inventory.cluster -e @install_vars.yml {{ EXTRA_SETUP_PARAMS|default('') }}"
  args:
    chdir: "/root/ansible-tower-setup"
    creates: "/usr/bin/ansible-tower-service"
  when: inventory_template == "inventory_cluster.j2"

- name: "Running setup.sh"
  command: "./setup.sh -i inventory.cluster -e @install_vars.yml {{ EXTRA_SETUP_PARAMS|default('') }}"
  args:
    chdir: "/root/ansible-tower-setup"
    creates: "/usr/bin/automation-controller-service"
  when: inventory_template == "inventory_cluster_4.j2" or inventory_template == "inventory_cluster_4.1.j2"

- name: Create Inventory file for towerperf Monitoring and Benchmarking
  template:
    src: inventory_towerperf.j2
    dest: "{{ playbook_dir }}/../conf/inventory_towerperf_ibm_cloud"
  delegate_to: localhost
  when: "'tower' in groups and groups['tower'] | length > 0"

- name: Load manifest into variable
  local_action:
    module: slurp
    src: "{{ playbook_dir }}/../playbooks/setup/files/manifest.zip"
  register: manifest_file
  delegate_to: localhost
  when: "'tower' in groups and groups['tower'] | length > 0"

- name: Post manifest file
  uri:
    url: https://{{ansible_host}}/api/v2/config/
    method: POST
    user: admin
    password: "{{ admin_password }}"
    body: '{ "eula_accepted": true, "manifest": "{{ manifest_file.content }}" }'
    body_format: json
    validate_certs: false
    force_basic_auth: true
  when: "'tower' in groups and groups['tower'] | length > 0"
